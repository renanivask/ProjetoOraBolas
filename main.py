import math
import matplotlib.pyplot as plt

def info_arquivo(file_path):
    valores_de_x = []
    valores_de_y = []
    valores_do_tempo = []

    with open(file_path, 'r') as file:
        next(file)

        for linha in file:
            linha = linha.strip().replace(',', '.')
            tempo, x, y = map(float, linha.split('\t'))
            valores_do_tempo.append(tempo)
            valores_de_x.append(x)
            valores_de_y.append(y)

    return valores_do_tempo, valores_de_x, valores_de_y

tempos, bola_x, bola_y = info_arquivo("bola.txt")

aceleracao_r = 2.8
raio_r = 0.09
raio_b = 0.0105

S0x = float(input("Digite a posi칞칚o inicial da bola em X: "))
S0y = float(input("Digite a posi칞칚o inicial da bola em Y: "))

raio_interceptacao = raio_b + raio_r

tempo_interceptacao = 99999
x_bola_imediato = 0.0
y_bola_imediato = 0.0
distancia_total = 0.0

# calcular tempo_interceptacao
for i in range(len(bola_x)):
    x_bola_imediato = bola_x[i]
    y_bola_imediato = bola_y[i]
    tempo_max_interceptacao = tempos[i]
    distancia = (((x_bola_imediato - S0x)**2 + (y_bola_imediato - S0y)**2)**0.5) + raio_interceptacao
    t = (distancia/(0.5*aceleracao_r))**0.5
    if t <= tempo_max_interceptacao:
        tempo_interceptacao = t
        distancia_total = distancia
        print("Tempo necess치rio para a intercepta칞칚o: ", tempo_interceptacao)
        print("Ponto x de intercepta칞칚o: ", x_bola_imediato,
              "\nPonto y de intercepta칞칚o: ", y_bola_imediato)
        print("Tempo at칠 intercepta칞칚o: ", tempo_max_interceptacao)
        break

tempo_agora = 0.0
sx_imediato = S0x
sy_imediato = S0y
aceleracao_x = (x_bola_imediato - sx_imediato)/distancia_total * aceleracao_r
aceleracao_y = (y_bola_imediato - sy_imediato)/distancia_total * aceleracao_r
poiscao_x = []
poiscao_y = []

# Posicoes pro grafico do robo
while True:
    if tempo_agora >= tempo_interceptacao:
        break
    x_agora = S0x + (aceleracao_x * (tempo_agora**2))/2
    y_agora = S0y + (aceleracao_y * (tempo_agora**2))/2
    tempo_agora += 0.001
    poiscao_x.append(x_agora)
    poiscao_y.append(y_agora)

# Crie listas vazias para armazenar as grandezas de interesse
posicao_x_r = []
posicao_y_r = []
posicao_x_b = []
posicao_y_b = []
velocidade_x_r_lista = []
velocidade_y_r_lista = []
velocidade_x_b_lista = []
velocidade_y_b_lista = []
acel_x_r_lista = []
acel_y_r_lista = []
acel_x_b_lista = []
acel_y_b_lista = []
distancia_relativa_lista = []

# Posicoes, velocidades, acelera칞칫es e dist칙ncia
for tempo in tempos:
    x_imediato_r = sx_imediato + (aceleracao_x * (tempo**2))/2
    y_imediato_r = sy_imediato + (aceleracao_y * (tempo**2))/2
    x_imediato_b = x_bola_imediato
    y_imediato_b = y_bola_imediato
    velocidade_x_r = aceleracao_x * tempo
    velocidade_y_r = aceleracao_y * tempo
    velocidade_x_b = 0.0
    velocidade_y_b = 0.0
    acel_x_r = aceleracao_x
    acel_y_r = aceleracao_y
    acel_x_b = 0.0
    acel_y_b = 0.0
    distancia_relativa = ((x_imediato_r - x_imediato_b)**2 + (y_imediato_r - y_imediato_b)**2)**0.5

    posicao_x_r.append(x_imediato_r)
    posicao_y_r.append(y_imediato_r)
    posicao_x_b.append(x_imediato_b)
    posicao_y_b.append(y_imediato_b)

    velocidade_x_r_lista.append(velocidade_x_r)
    velocidade_y_r_lista.append(velocidade_y_r)
    velocidade_x_b_lista.append(velocidade_x_b)
    velocidade_y_b_lista.append(velocidade_y_b)

    acel_x_r_lista.append(acel_x_r)
    acel_y_r_lista.append(acel_y_r)
    acel_x_b_lista.append(acel_x_b)
    acel_y_b_lista.append(acel_y_b)

    distancia_relativa_lista.append(distancia_relativa)

# Menu interativo
while True:
    print("\nEscolha o tipo de gr치fico:")
    print("1. Gr치fico das trajet칩rias da bola e do rob칪 em um plano xy, at칠 o ponto de intercepta칞칚o")
    print("2. Gr치fico das coordenadas 洧논 e 洧녽 da posi칞칚o da bola e do rob칪 em fun칞칚o do tempo 洧노")
    print("3. Gr치fico dos componentes 洧녺洧논 e 洧녺洧녽 da velocidade da bola e do rob칪 em fun칞칚o do tempo 洧노")
    print("4. Gr치fico dos componentes 洧녩洧논 e 洧녩洧녽 da acelera칞칚o da bola e do rob칪 em fun칞칚o do tempo 洧노")
    print("5. Gr치fico da dist칙ncia relativa 洧녬 entre o rob칪 e a bola como fun칞칚o do tempo 洧노")
    print("0. Sair")

    escolha = input("Digite o n칰mero da op칞칚o desejada: ")

    if escolha == "1":
        plt.figure(figsize=(8, 6))
        plt.plot(bola_x, bola_y, color="blueviolet", marker=",", label="Trajet칩ria da Bola")
        plt.plot(posicao_x_r, posicao_y_r, color="darkcyan", marker=",", label="Trajet칩ria do Rob칪")
        plt.xlabel("Posi칞칚o X")
        plt.ylabel("Posi칞칚o Y")
        plt.title("Trajet칩rias da Bola e do Rob칪")
        plt.legend()
        plt.xlim(0, 9.0)
        plt.ylim(0, 6.0)
        plt.grid(True)
        plt.show()
  
    if escolha == "2":
        # Gr치fico das coordenadas 洧논 e 洧녽 da posi칞칚o da bola e do rob칪 em fun칞칚o do tempo 洧노
        plt.figure(figsize=(12, 6))
        plt.subplot(2, 2, 1)
        plt.plot(tempos, bola_x, color="blueviolet", marker=",", label="Posi칞칚o Bola X")
        plt.plot(tempos, posicao_x_r, color="darkcyan", marker=",", label="Posi칞칚o Rob칪 X")
        plt.xlabel("Tempo (s)")
        plt.ylabel("Posi칞칚o X")
        plt.title("Coordenadas de x da Posi칞칚o da Bola e do Rob칪")
        plt.legend()

        plt.subplot(2, 2, 2)
        plt.plot(tempos, bola_y, color="blueviolet", marker=",", label="Posi칞칚o Bola Y")
        plt.plot(tempos, posicao_y_r, color="darkcyan", marker=",", label="Posi칞칚o Rob칪 Y")
        plt.xlabel("Tempo (s)")
        plt.ylabel("Posi칞칚o Y")
        plt.title("Coordenadas de y da Posi칞칚o da Bola e do Rob칪")
        plt.legend()

        plt.show()

    elif escolha == "3":
        # Gr치fico dos componentes 洧녺洧논 e 洧녺洧녽 da velocidade da bola e do rob칪 em fun칞칚o do tempo 洧노
        plt.figure(figsize=(12, 6))
        plt.subplot(2, 2, 1)
        plt.plot(tempos, velocidade_x_r_lista, color="darkcyan", marker=",", label="Velocidade X Rob칪")
        plt.plot(tempos, velocidade_x_b_lista, color="blueviolet", marker=",", label="Velocidade X Bola")
        plt.xlabel("Tempo (s)")
        plt.ylabel("Velocidade X")
        plt.title("Componente vx da Posi칞칚o da Bola e do Rob칪")
        plt.legend()

        plt.subplot(2, 2, 2)
        plt.plot(tempos, velocidade_y_r_lista, color="darkcyan", marker=",", label="Velocidade Y Rob칪")
        plt.plot(tempos, velocidade_y_b_lista, color="blueviolet", marker=",", label="Velocidade Y Bola")
        plt.xlabel("Tempo (s)")
        plt.ylabel("Velocidade Y")
        plt.title("Componente vy da Posi칞칚o da Bola e do Rob칪")
        plt.legend()

        plt.tight_layout()
        plt.show()

    elif escolha == "4":
        # Gr치fico dos componentes 洧녩洧논 e 洧녩洧녽 da acelera칞칚o da bola e do rob칪 em fun칞칚o do tempo
        plt.figure(figsize=(12, 6))
        plt.subplot(2, 2, 1)
        plt.plot(tempos, acel_x_r_lista, color="darkcyan", label="Acelera칞칚o X Rob칪")
        plt.plot(tempos, acel_x_b_lista, color="blueviolet", label="Acelera칞칚o X Bola")
        plt.xlabel("Tempo (s)")
        plt.ylabel("Acelera칞칚o X")
        plt.title("Componente ax da Posi칞칚o da Bola e do Rob칪")
        plt.legend()

        plt.subplot(2, 2, 2)
        plt.plot(tempos, acel_y_r_lista, color="darkcyan", label="Acelera칞칚o Y Rob칪")
        plt.plot(tempos, acel_y_b_lista, color="blueviolet", label="Acelera칞칚o Y Bola")
        plt.xlabel("Tempo (s)")
        plt.ylabel("Acelera칞칚o Y")
        plt.title("Componente ay da Posi칞칚o da Bola e do Rob칪")
        plt.legend()

        plt.tight_layout()
        plt.show()


    elif escolha == "5":
        # Gr치fico da dist칙ncia relativa 洧녬 entre o rob칪 e a bola como fun칞칚o do tempo
        plt.figure(figsize=(12, 6))
        plt.subplot(2, 2, 1)
        plt.plot(tempos, distancia_relativa_lista, color="darkcyan", marker=",", label="Dist칙ncia Relativa")
        plt.xlabel("Tempo (s)")
        plt.ylabel("Dist칙ncia Relativa")
        plt.title("Dist칙ncia relativa d entre o rob칪 e a bola como fun칞칚o do tempo")
        plt.legend()

        plt.show()

    elif escolha == "0":
        break

    else:
        print("Op칞칚o inv치lida. Tente novamente.")
